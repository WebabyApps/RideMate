/**
  * @description This ruleset enforces a strict user-ownership model for user profiles and uses shared access control for rides and associated chat messages. Ratings are publicly readable but only modifiable by authorized users (the rater).
  * @dataStructure
  *   - `/users/{userId}`: Stores user profile data, accessible only to the user themselves.
  *   - `/rides/{rideId}`: Stores ride information, with access controlled via the `offererId` and `riderIds` fields.
  *   - `/ratings/{ratingId}`: Stores rating information, publicly readable but writable only by the rater.
  *   - `/rides/{rideId}/messages/{messageId}`: Stores chat messages for a ride, accessible to users participating in the ride.
  * @keySecurityDecisions
  *   - User profiles are strictly private and only accessible to the owner.
  *   - Rides are shared resources; access is controlled through the `offererId` and `riderIds` fields.
  *   - Ratings are publicly readable to encourage transparency, but only the rater can create them.
  *   - Listing of all users is disallowed to protect user privacy.
  * @denormalizationForAuthorization
  *   - `Ride` documents include `offererId` to quickly identify the ride creator.
  *   - `Ride` documents include `riderIds` to track users participating in the ride.
  *   - `Rating` documents include both `raterId` and `ratedUserId` for authorization purposes.
  * @structuralSegregation User profiles are stored in a dedicated `/users/{userId}` collection to enforce strict ownership.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   /**
    * @description Controls access to user profile documents. Only the user themselves can read, update, or delete their profile.
    * @path /users/{userId}
    * @allow (create) User with ID 'user_abc' can create their own profile document.
    *     request.auth.uid == 'user_abc' && request.resource.data.id == 'user_abc'
    * @allow (get) User with ID 'user_abc' can read their own profile document.
    *     request.auth.uid == 'user_abc'
    * @allow (update) User with ID 'user_abc' can update their own profile document.
    *     request.auth.uid == 'user_abc'
    * @allow (delete) User with ID 'user_abc' can delete their own profile document.
    *     request.auth.uid == 'user_abc'
    * @deny (create) User with ID 'user_xyz' cannot create a profile document for user 'user_abc'.
    *     request.auth.uid == 'user_xyz' && request.resource.data.id == 'user_abc'
    * @deny (get) User with ID 'user_xyz' cannot read the profile document of user 'user_abc'.
    *     request.auth.uid == 'user_xyz'
    * @deny (update) User with ID 'user_xyz' cannot update the profile document of user 'user_abc'.
    *     request.auth.uid == 'user_xyz'
    * @deny (delete) User with ID 'user_xyz' cannot delete the profile document of user 'user_abc'.
    *     request.auth.uid == 'user_xyz'
    * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
    */
   match /users/{userId} {
    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }
 

    allow get: if isOwner(userId);
    allow list: if false; // Listing all users is not permitted.
    allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Controls access to ride documents. The ride offerer can create, update, and delete rides. Any authenticated user can read/list rides.
    * @path /rides/{rideId}
    * @allow (create) User with ID 'user_abc' can create a ride with themself as the offerer.
    *     request.auth.uid == 'user_abc' && request.resource.data.offererId == 'user_abc'
    * @allow (get) Any authenticated user can read a ride document.
    *     request.auth.uid != null
    * @allow (list) Any authenticated user can list ride documents.
    *     request.auth.uid != null
    * @allow (update) User with ID 'user_abc' can update a ride where they are the offerer.
    *     request.auth.uid == 'user_abc' && resource.data.offererId == 'user_abc'
    * @allow (delete) User with ID 'user_abc' can delete a ride where they are the offerer.
    *     request.auth.uid == 'user_abc' && resource.data.offererId == 'user_abc'
    * @deny (create) User with ID 'user_xyz' cannot create a ride with 'user_abc' as the offerer.
    *     request.auth.uid == 'user_xyz' && request.resource.data.offererId == 'user_abc'
    * @deny (update) User with ID 'user_xyz' cannot update a ride where 'user_abc' is the offerer.
    *     request.auth.uid == 'user_xyz' && resource.data.offererId == 'user_abc'
    * @deny (delete) User with ID 'user_xyz' cannot delete a ride where 'user_abc' is the offerer.
    *     request.auth.uid == 'user_xyz' && resource.data.offererId == 'user_abc'
    * @principle Enforces owner-only writes and public reads for ride information.
    */
   match /rides/{rideId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOfferer(offererId) {
     return request.auth.uid == offererId;
    }
 

    function isExistingOfferer(rideId, offererId) {
     return isSignedIn() && isOfferer(offererId) && exists(/databases/$(database)/documents/rides/$(rideId));
    }
 

    allow get, list: if isSignedIn();
    allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
    allow update: if isExistingOfferer(rideId, resource.data.offererId);
    allow delete: if isExistingOfferer(rideId, resource.data.offererId);
   }
 

   /**
    * @description Controls access to rating documents. Any authenticated user can read a rating, but only the rater can create, update, or delete it.
    * @path /ratings/{ratingId}
    * @allow (create) User with ID 'user_abc' can create a rating with themself as the rater.
    *     request.auth.uid == 'user_abc' && request.resource.data.raterId == 'user_abc'
    * @allow (get) Any authenticated user can read a rating document.
    *     request.auth.uid != null
    * @allow (list) Any authenticated user can list rating documents.
    *     request.auth.uid != null
    * @allow (update) User with ID 'user_abc' can update a rating where they are the rater.
    *     request.auth.uid == 'user_abc' && resource.data.raterId == 'user_abc'
    * @allow (delete) User with ID 'user_abc' can delete a rating where they are the rater.
    *     request.auth.uid == 'user_abc' && resource.data.raterId == 'user_abc'
    * @deny (create) User with ID 'user_xyz' cannot create a rating with 'user_abc' as the rater.
    *     request.auth.uid == 'user_xyz' && request.resource.data.raterId == 'user_abc'
    * @deny (update) User with ID 'user_xyz' cannot update a rating where 'user_abc' is the rater.
    *     request.auth.uid == 'user_xyz' && resource.data.raterId == 'user_abc'
    * @deny (delete) User with ID 'user_xyz' cannot delete a rating where 'user_abc' is the rater.
    *     request.auth.uid == 'user_xyz' && resource.data.raterId == 'user_abc'
    * @principle Enforces owner-only writes and public reads for rating information.
    */
   match /ratings/{ratingId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isRater(raterId) {
     return request.auth.uid == raterId;
    }
 

    function isExistingRater(ratingId, raterId) {
     return isSignedIn() && isRater(raterId) && exists(/databases/$(database)/documents/ratings/$(ratingId));
    }
 

    allow get, list: if isSignedIn();
    allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
    allow update: if isExistingRater(ratingId, resource.data.raterId);
    allow delete: if isExistingRater(ratingId, resource.data.raterId);
   }
 

   /**
    * @description Controls access to chat messages within a ride. Only users who are part of the ride (either the offerer or a rider) can read or write messages.
    * @path /rides/{rideId}/messages/{messageId}
    * @allow (create) User with ID 'user_abc' can create a message in ride 'ride_123' if they are the offerer or a rider.
    *     request.auth.uid == 'user_abc' && (get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_abc' || 'user_abc' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds)
    * @allow (get) User with ID 'user_abc' can read a message in ride 'ride_123' if they are the offerer or a rider.
    *     request.auth.uid == 'user_abc' && (get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_abc' || 'user_abc' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds)
    * @allow (list) User with ID 'user_abc' can list messages in ride 'ride_123' if they are the offerer or a rider.
    *     request.auth.uid == 'user_abc' && (get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_abc' || 'user_abc' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds)
    * @allow (update) User with ID 'user_abc' can update a message in ride 'ride_123' if they are the offerer or a rider, and they are the message sender.
    *     request.auth.uid == 'user_abc' && (get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_abc' || 'user_abc' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds) && resource.data.senderId == 'user_abc'
    * @allow (delete) User with ID 'user_abc' can delete a message in ride 'ride_123' if they are the offerer or a rider, and they are the message sender.
    *     request.auth.uid == 'user_abc' && (get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_abc' || 'user_abc' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds) && resource.data.senderId == 'user_abc'
    * @deny (create) User with ID 'user_xyz' cannot create a message in ride 'ride_123' if they are not the offerer or a rider.
    *     request.auth.uid == 'user_xyz' && !(get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_xyz' || 'user_xyz' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds)
    * @deny (get) User with ID 'user_xyz' cannot read a message in ride 'ride_123' if they are not the offerer or a rider.
    *     request.auth.uid == 'user_xyz' && !(get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_xyz' || 'user_xyz' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds)
    * @deny (list) User with ID 'user_xyz' cannot list messages in ride 'ride_123' if they are not the offerer or a rider.
    *     request.auth.uid == 'user_xyz' && !(get(/databases/$(database)/documents/rides/ride_123).data.offererId == 'user_xyz' || 'user_xyz' in get(/databases/$(database)/documents/rides/ride_123).data.riderIds)
    * @principle Enforces shared access based on ride participation.
    */
   match /rides/{rideId}/messages/{messageId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isRideParticipant(rideId) {
     let ride = get(/databases/$(database)/documents/rides/$(rideId)).data;
     return isSignedIn() && (ride.offererId == request.auth.uid || request.auth.uid in ride.riderIds);
    }
 

    function isExistingSender(rideId, messageId, senderId) {
     return isRideParticipant(rideId) && exists(/databases/$(database)/documents/rides/$(rideId)/messages/$(messageId)) && senderId == request.auth.uid;
    }
 

    allow get, list: if isRideParticipant(rideId);
    allow create: if isRideParticipant(rideId);
    allow update: if isExistingSender(rideId, messageId, resource.data.senderId);
    allow delete: if isExistingSender(rideId, messageId, resource.data.senderId);
   }
  }
 }