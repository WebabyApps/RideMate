/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Rides are publicly readable but writable only by the offerer. Ratings are restricted to authenticated users and are scoped to specific rides.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /rides/{rideId}: Stores ride information. Publicly readable. Writable only by the ride offerer.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a specific ride. Only authenticated users can create ratings, and only if they are a rider in the ride.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents. User listing is disallowed.
 * - Rides are publicly readable, allowing anyone to see available rides. Only the ride offerer can modify or delete a ride.
 * - Ratings can only be created by authenticated users who are riders in the ride.
 *
 * Denormalization for Authorization:
 * - The `Ride` document contains the `offererId` to determine who can modify it. This avoids needing a separate lookup.
 * - The `Rating` document is nested under the `/rides/{rideId}` document to easily scope ratings to rides.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership: Only the user can read/write their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride documents. Rides are publicly readable, but only the offerer can modify or delete them.
     * @path /rides/{rideId}
     * @allow (get, list) any authenticated or unauthenticated user can read the rides
     * @allow (create) any authenticated user can create a ride
     * @allow (update, delete) only the ride offerer can update or delete the ride.
     * @deny (update, delete) if the ride does not exist.
     * @principle Public read, owner-only writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to rating documents under a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) only authenticated users who are riders in the ride can create a rating.
     * @allow (get, list) any authenticated user can read the ratings for the ride
     * @deny (update, delete) No updates or deletes allowed on ratings.
     * @principle Restricts rating creation to riders only.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isRider(rideId);
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isRider(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]);
    }
  }
}