/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts ride creation and modification to authenticated users.
 * Ratings are associated with specific rides and are also restricted to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /rides/{rideId}: Stores ride information.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for specific rides.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Only authenticated users can create, update, or delete rides.
 * - Only authenticated users can create ratings for rides.
 * - Listing all users is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * The `Ride` entity includes `offererId` to enable easy validation of ride ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the user can access their own data.
     * @path /users/{userId}
     * @allow (get) User 'user_abc' can read their own profile.
     * @allow (create) User 'user_abc' can create their own profile if request.auth.uid == userId
     * @allow (update) User 'user_abc' can update their own profile.
     * @allow (delete) User 'user_abc' can delete their own profile.
     * @deny (get) User 'user_xyz' cannot read User 'user_abc' profile.
     * @deny (create) User 'user_xyz' cannot create User 'user_abc' profile.
     * @deny (update) User 'user_xyz' cannot update User 'user_abc' profile.
     * @deny (delete) User 'user_xyz' cannot delete User 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing users for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages rides, allowing authenticated users to create, update, and delete them.
     * @path /rides/{rideId}
     * @allow (get) Any user can read any ride.
     * @allow (list) Any user can list available rides.
     * @allow (create) Authenticated user 'user_abc' can create a ride with offererId set to their uid.
     * @allow (update) User 'user_abc' can update their ride if they are the offerer.
     * @allow (delete) User 'user_abc' can delete their ride if they are the offerer.
     * @deny (create) Anonymous user cannot create a ride.
     * @deny (update) User 'user_xyz' cannot update User 'user_abc' ride.
     * @deny (delete) User 'user_xyz' cannot delete User 'user_abc' ride.
     * @principle Authenticated users can create, update and delete their own rides.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Manages ratings for rides, allowing authenticated users to create ratings.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (get) Any user can read a rating.
     * @allow (list) Any user can list ratings for rides.
     * @allow (create) Authenticated user 'user_abc' can create a rating with raterId set to their uid.
     * @deny (create) Anonymous user cannot create a rating.
     * @deny (update) Ratings cannot be updated.
     * @deny (delete) Ratings cannot be deleted.
     * @principle Authenticated users can create ratings for rides.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of an existing resource.
      * @param {string} userId The user ID to check against.
      * @return {boolean} True if the user is the owner, false otherwise.
      */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}