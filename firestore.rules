/**
 * @file Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and shared-access models to protect user data and ensure that only authorized users can create, read, update, or delete resources. Strict ownership is enforced for user profiles, while a shared-access pattern is used for rides. All rules rely on the `request.auth` object for authentication and authorization. Data structure flexibility is favored over rigid schema enforcement.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with ownership determined by the userId.
 * - /rides/{rideId}: Stores ride information. The 'offererId' field indicates the creator. 'riderIds' is an array containing the user IDs of all riders.
 * - /ratings/{ratingId}: Stores ratings data, with 'raterId' indicating who gave the rating and 'ratedUserId' indicating who was rated.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages associated with a ride.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the authenticated user.
 * - Rides are open to read by anyone, but creation, updates, and deletion are restricted to the ride offerer. Adding or removing riders requires being the offerer or an existing rider.
 * - Ratings are available to anyone.
 * - Listing operations are generally allowed for user-owned subcollections.
 * - Schema validation is minimized for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Ride documents include the `offererId` field to easily identify the ride creator for authorization checks.
 * - Ride documents include the `riderIds` array to store IDs of users in the ride, enabling quick verification of ride participants.
 * - Rating documents include both `raterId` and `ratedUserId` to enable rules to check who created the rating and who is being rated, without external `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can create, read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates a profile document at /users/user123.
     * @allow (get, list, update, delete) - User with UID 'user123' reads their profile document at /users/user123.
     * @deny (create) - User with UID 'user456' attempts to create a profile document at /users/user123.
     * @deny (get, list, update, delete) - User with UID 'user456' attempts to read profile document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information. Anyone can read ride information, but only the ride offerer can create, update, or delete it.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read a ride document at /rides/ride123.
     * @allow (create) - User with UID 'user123' creates a ride document at /rides/ride123 with offererId: 'user123'.
     * @allow (update, delete) - User with UID 'user123' updates/deletes a ride document at /rides/ride123 where resource.data.offererId == 'user123'.
     * @deny (create) - User with UID 'user456' attempts to create a ride document at /rides/ride123 with offererId: 'user123'.
     * @deny (update, delete) - User with UID 'user456' attempts to update a ride document at /rides/ride123 where resource.data.offererId == 'user123'.
     * @principle Public read, owner-only writes.
     */
    match /rides/{rideId} {
      function isOfferer(offererId) {
        return request.auth.uid == offererId;
      }

       function isExistingOfferer(offererId) {
        return isOfferer(offererId) && resource != null;
      }

      allow get, list: if true;

      allow create: if isOfferer(request.resource.data.offererId);
      allow update: if isExistingOfferer(resource.data.offererId);
      allow delete: if isExistingOfferer(resource.data.offererId);
    }

    /**
     * @description Allows anyone to read ride ratings.
     * @path /ratings/{ratingId}
     * @allow (get, list) - Any user can read a rating document at /ratings/rating123.
     * @deny (create, update, delete) - No one can create, update, or delete a rating.
     * @principle Public read, no writes.
     */
    match /ratings/{ratingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to chat messages within a ride. Only users who are riders in the ride can read and send messages.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (get, list) - User with UID 'user123' can read chat messages in /rides/ride123/messages if 'user123' is in the riderIds array of the ride document.
     * @allow (create) - User with UID 'user123' can create a chat message in /rides/ride123/messages if 'user123' is in the riderIds array of the ride document.
     * @deny (get, list, create, update, delete) - User with UID 'user456' cannot read or create chat messages in /rides/ride123/messages if 'user456' is not in the riderIds array of the ride document.
     * @principle Shared access based on ride membership.
     */
    match /rides/{rideId}/messages/{messageId} {
        function isRider(rideId) {
            return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]);
        }

        allow get, list: if isRider(rideId);
        allow create: if isRider(rideId);
        allow update, delete: if false;
    }
  }
}