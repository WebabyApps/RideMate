/**
 * @fileOverview Firestore Security Rules for RideMate.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles. Rides are publicly readable,
 * but write access is restricted to the user offering the ride. Ratings are restricted to be created by authenticated users,
 * with owner-only update and delete access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only access their own profile.
 * - /rides/{rideId}: Stores ride information. Rides are publicly readable, but only the offerer can modify them.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for rides. Only the rater can update or delete their own ratings.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - Rides are publicly readable.
 *
 * Denormalization for Authorization:
 * The `offererId` field is used in the `rides` collection to determine ownership, avoiding the need for additional reads to a user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - Creating a user document with an ID that doesn't match the authenticated user's ID.
     * @deny (get, list, update, delete) - Any user attempting to access a profile that is not their own.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) - Anyone can view ride information.
     * @allow (create) - Only authenticated users can create rides. The offererId must match the user's ID.
     * @allow (update, delete) - Only the user who offered the ride can modify it.
     * @deny (create) - Creating a ride with an offererId that doesn't match the authenticated user's ID.
     * @deny (update, delete) - Any user attempting to modify a ride they did not create.
     * @principle Public read access with owner-only writes, enforcing ownership via the 'offererId' field.
     */
    match /rides/{rideId} {
      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }

        function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isOwner(resource.data.offererId) && resource != null;
      allow delete: if isOwner(resource.data.offererId) && resource != null;
    }

    /**
     * @description Manages ratings for rides.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - Authenticated users can create ratings for rides. The raterId must match the user's ID.
     * @allow (get, list) - Anyone can view ratings for a ride.
     * @allow (update, delete) - Only the user who created the rating can modify or delete it.
     * @deny (create) - Creating a rating with a raterId that doesn't match the authenticated user's ID.
     * @deny (update, delete) - Any user attempting to modify or delete a rating they did not create.
     * @principle Enforces ownership for rating modifications and deletion, allowing public read access.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isOwner(raterId) {
        return request.auth.uid == raterId;
      }

        function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isOwner(resource.data.raterId) && resource != null;
      allow delete: if isOwner(resource.data.raterId) && resource != null;
    }
  }
}