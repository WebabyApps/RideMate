/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model where users own their profiles and rides,
 * with rides being publicly visible but only modifiable by their offerer. Ratings are restricted
 * to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /rides/{rideId}: Stores ride information, publicly readable but writable only by their offerer.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a specific ride, accessible to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Rides are publicly readable to facilitate discovery.
 * - Only the ride offerer can create, update, or delete a ride.
 * - Ratings can be created by any authenticated user for a given ride.
 * - Data shape is not strictly enforced beyond authorization-critical fields to allow rapid iteration.
 *
 * Denormalization for Authorization:
 * - Rides store the `offererId` to simplify ownership checks for modification operations.
 *
 * Structural Segregation:
 * - Public rides and private user data are stored in separate top-level collections to optimize list operations and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId}.
     * @allow (create, update, delete) User with matching {userId}.
     * @deny (get, list) User without matching {userId}.
     * @deny (create, update, delete) User without matching {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the requesting user id matches the resource's user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the requesting user is the existing owner of the resource
      function isExistingOwner(userId) {
        return isOwner(userId);
      }
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing all users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) Any user.
     * @allow (create) User with matching `offererId`.
     * @allow (update, delete) User with matching `offererId`.
     * @deny (create) User without matching `offererId`.
     * @deny (update, delete) User without matching `offererId`.
     * @principle Enforces owner-only writes for rides, public reads.
     */
    match /rides/{rideId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }

      function isExistingOwner(offererId) {
        return isOwner(offererId);
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.offererId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (get, list) Any user.
     * @allow (create) Any authenticated user.
     * @allow (update, delete) if false; // Ratings cannot be updated or deleted.
     * @deny (create) Unauthenticated user.
     * @principle Restricts access to authenticated users for creation.
     */
    match /rides/{rideId}/ratings/{ratingId} {

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}