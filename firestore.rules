/**
 * @file Firebase Security Rules for RideMate
 *
 * @description This ruleset enforces a user-ownership model for user profiles and
 * restricts access to rides and ratings based on user roles and ride participation.
 * It prioritizes authorization independence by denormalizing relevant data into
 * documents, avoiding the need for `get()` calls in security rules.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile data, accessible only to the user.
 * - /rides/{rideId}: Stores ride information, with access control based on the ride offerer and riders.
 * - /ratings/{ratingId}: Stores rating information, with access control based on the rater and rated user.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages associated with a specific ride, accessible to ride participants.
 *
 * @keySecurityDecisions
 * - User profiles are strictly private and only accessible to the owning user.
 * - Rides are publicly readable, but creating, updating, and deleting rides are restricted to the ride offerer.
 * - Ratings are publicly readable, but creating, updating, and deleting ratings are restricted to the rater.
 * - Chat messages within a ride are only accessible to users participating in that ride.
 * - Listing rides and ratings is allowed for all users.
 * - Listing chat messages is allowed only for participants of the ride.
 *
 * @denormalizationForAuthorization
 * - Ride documents include `offererId` to identify the ride creator, enabling rules to check ownership without `get()` calls.
 * - Rating documents include both `raterId` and `ratedUserId`, allowing rules to check who created the rating and who is being rated, without external `get()` calls.
 *
 * @structuralSegregation
 * - User profile data is stored under `/users/{userId}`, ensuring path-based ownership.
 * - Chat messages are stored as subcollections of rides, contextually linking them to the ride and simplifying access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123' and request.resource.data.id == 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read, update, or delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete profile with ID 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to ride documents. Anyone can read ride documents, but only the ride offerer can create, update, or delete them.
     * @path /rides/{rideId}
     * @allow (get, list) Any user can read and list ride documents.
     * @allow (create) User with UID 'user123' can create a ride document if request.auth.uid == request.resource.data.offererId.
     * @allow (update, delete) User with UID 'user123' can update or delete a ride document if request.auth.uid == resource.data.offererId.
     * @deny (create) User with UID 'user456' cannot create a ride document if request.auth.uid != request.resource.data.offererId.
     * @deny (update, delete) User with UID 'user456' cannot update or delete a ride document if request.auth.uid != resource.data.offererId.
     * @principle Allows public read access with owner-only writes.
     */
    match /rides/{rideId} {
      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }

       function isExistingOwner(offererId) {
        return isOwner(offererId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.offererId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.offererId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to rating documents. Anyone can read rating documents, but only the rater can create, update, or delete them.
     * @path /ratings/{ratingId}
     * @allow (get, list) Any user can read and list rating documents.
     * @allow (create) User with UID 'user123' can create a rating document if request.auth.uid == request.resource.data.raterId.
     * @allow (update, delete) User with UID 'user123' can update or delete a rating document if request.auth.uid == resource.data.raterId.
     * @deny (create) User with UID 'user456' cannot create a rating document if request.auth.uid != request.resource.data.raterId.
     * @deny (update, delete) User with UID 'user456' cannot update or delete a rating document if request.auth.uid != resource.data.raterId.
     * @principle Allows public read access with owner-only writes.
     */
    match /ratings/{ratingId} {
      function isOwner(raterId) {
        return request.auth.uid == raterId;
      }

      function isExistingOwner(raterId) {
        return isOwner(raterId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.raterId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.raterId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.raterId);
    }

    /**
     * @description Controls access to chat messages within a specific ride. Only users participating in the ride can read or write messages.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (get, list) User with UID 'user123' can read or list chat messages for ride 'ride456' if 'user123' is a rider in 'ride456'.
     * @allow (create) User with UID 'user123' can create a chat message for ride 'ride456' if 'user123' is a rider in 'ride456' and request.resource.data.senderId == 'user123'.
     * @allow (update, delete) User with UID 'user123' can update or delete a chat message for ride 'ride456' if 'user123' is the sender of the message and a rider in 'ride456'.
     * @deny (get, list, create, update, delete) User with UID 'user456' cannot access chat messages for ride 'ride456' if 'user456' is not a rider in 'ride456'.
     * @principle Restricts access to chat messages to ride participants only.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isParticipant(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]);
      }

      function isOwner(senderId) {
        return request.auth.uid == senderId;
      }

      function isExistingOwner(senderId) {
        return isOwner(senderId) && resource != null;
      }
      
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isParticipant(rideId);
      allow create: if isSignedIn() && isParticipant(rideId) && isOwner(request.resource.data.senderId);
      allow update: if isSignedIn() && isParticipant(rideId) && isExistingOwner(resource.data.senderId);
      allow delete: if isSignedIn() && isParticipant(rideId) && isExistingOwner(resource.data.senderId);
    }
  }
}