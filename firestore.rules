/**
 * @file Firestore Security Rules for RideMate
 * @description This ruleset enforces a combination of ownership-based and public-read with owner-write access control patterns.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /rides/{rideId}: Stores ride information, publicly readable but writable only by the ride offerer.
 * - /rides/{rideId}/ratings: Stores ratings for rides, accessible only to authenticated users.
 * - /rides/{rideId}/messages: Stores messages for rides, accessible only to authenticated users.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Rides are publicly readable, allowing anyone to see available rides.  Only the ride owner can modify or delete a ride.
 * - Ratings and messages for a ride can only be created by authenticated users.
 *
 * Denormalization for Authorization:
 * - Rides require an `offererId` field to identify the ride creator for write authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /users collection.  Allows each user to read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @allow (get) - User with UID 'user123' can read their own profile document at /users/user123.
     * @allow (update) - User with UID 'user123' can update their own profile document at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their own profile document at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile document for another user at /users/user456.
     * @deny (get) - User with UID 'user123' cannot read another user's profile document at /users/user456.
     * @deny (update) - User with UID 'user123' cannot update another user's profile document at /users/user456.
     * @deny (delete) - User with UID 'user123' cannot delete another user's profile document at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // prevent listing all users
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /rides collection.  Allows public read, but only the ride offerer can create, update, or delete.
     * @path /rides/{rideId}
     * @allow (get) - Any user, authenticated or not, can read ride details at /rides/ride123.
     * @allow (list) - Any user, authenticated or not, can list rides in the /rides collection.
     * @allow (create) - User with UID 'user123' can create a ride with offererId 'user123' at /rides/ride456.
     * @allow (update) - User with UID 'user123' can update a ride they offered at /rides/ride456.
     * @allow (delete) - User with UID 'user123' can delete a ride they offered at /rides/ride456.
     * @deny (create) - User with UID 'user123' cannot create a ride with offererId 'user456'.
     * @deny (update) - User with UID 'user123' cannot update a ride offered by another user at /rides/ride456.
     * @deny (delete) - User with UID 'user123' cannot delete a ride offered by another user at /rides/ride456.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(offererId) {
        return isSignedIn() && request.auth.uid == offererId;
      }
      function isExistingOwner(offererId) {
        return isOwner(offererId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Rules for the /rides/{rideId}/ratings collection.  Allows any authenticated user to create a rating for a ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - User with UID 'user123' can create a rating for ride 'ride456' at /rides/ride456/ratings/rating789.
     * @allow (get) - Any authenticated user can get a ride rating
     * @allow (list) - Any authenticated user can list ride ratings
     * @deny (create) - Unauthenticated user cannot create a rating.
     * @deny (update) - Only the owner can update rating
     * @deny (delete) - Only the owner can delete rating
     * @principle Allows authenticated users to create ride ratings.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(raterId) {
        return isSignedIn() && request.auth.uid == raterId;
      }
      function isExistingOwner(raterId) {
        return isOwner(raterId) && resource != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.raterId);
      allow delete: if isExistingOwner(resource.data.raterId);
    }

    /**
     * @description Rules for the /rides/{rideId}/messages collection.  Allows any authenticated user to create a message for a ride.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) - User with UID 'user123' can create a message for ride 'ride456' at /rides/ride456/messages/message789.
     *  @allow (get) - Any authenticated user can get a ride messages
     *  @allow (list) - Any authenticated user can list ride messages
     * @deny (create) - Unauthenticated user cannot create a message.
     * @deny (update) - Only the owner can update messages
     * @deny (delete) - Only the owner can delete messages
     * @principle Allows authenticated users to create ride messages.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(senderId) {
        return isSignedIn() && request.auth.uid == senderId;
      }
      function isExistingOwner(senderId) {
        return isOwner(senderId) && resource != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.senderId);
      allow delete: if isExistingOwner(resource.data.senderId);
    }
  }
}