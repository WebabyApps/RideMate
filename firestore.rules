/**
 * @file Firestore Security Rules for RideMate
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and
 *  restricts ride creation/modification to authenticated users. Ratings are tied to specific rides
 *  and are created by authenticated users. Public read access is allowed for rides.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles.
 * - /rides: Stores ride information.
 * - /rides/{rideId}/ratings: Stores ratings associated with a particular ride.
 *
 * @key_security_decisions
 * - User listing is disallowed to protect user privacy.
 * - Rides are publicly readable, but creation, updates, and deletion are restricted to authenticated users.
 * - Ratings are restricted such that only authenticated users can create them for existing rides.
 * - Ride creator (offerer) owns the ride and can modify it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile.
     * @allow (get) - User with UID 'user_abc' can read their own profile.
     * @allow (update) - User with UID 'user_abc' can update their own profile.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read profile with ID 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update profile with ID 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete profile with ID 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to rides. Rides are publicly readable, but creating, updating, and deleting them are restricted to the ride offerer.
     * @path /rides/{rideId}
     * @allow (get) - Any user can read ride information.
     * @allow (list) - Any user can list ride information.
     * @allow (create) - User with UID 'user_abc' can create a new ride with offererId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update a ride they offered (offererId 'user_abc').
     * @allow (delete) - User with UID 'user_abc' can delete a ride they offered (offererId 'user_abc').
     * @deny (create) - User with UID 'user_xyz' cannot create a ride with offererId 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update ride offered by user 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete ride offered by user 'user_abc'.
     * @principle Allows public read access to rides but enforces document ownership for writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isRideOfferer(rideId, request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && isRideOfferer(rideId, request.auth.uid) && resource != null;
    }

    /**
     * @description Controls access to ratings for a specific ride. Only authenticated users can create ratings for existing rides.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - User with UID 'user_abc' can create a rating for ride 'ride_123'.
     * @allow (get) - Any user can read the rating for a specific ride.
     * @allow (list) - Any user can list ratings for a specific ride.
     * @deny (create) - User with UID 'user_abc' cannot create a rating if not authenticated.
     * @deny (update) - No one can update a rating (ratings are immutable).
     * @deny (delete) - No one can delete a rating (ratings are immutable).
     * @principle Restricts rating creation to authenticated users and disallows updates or deletes.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isRideOfferer(rideId, userId) {
      return get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == userId;
    }
  }
}