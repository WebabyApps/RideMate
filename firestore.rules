/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and ride data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user can read/write their own profile.
 * - /rides/{rideId}: Stores ride information. Anyone can read ride information, but only the offerer can modify or delete it.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a specific ride. Only authenticated users can create ratings.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Anyone can read rides.
 * - Only the ride offerer can modify or delete rides.
 * - Only authenticated users can create ride ratings.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, update, get, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) to anyone.
     * @allow (create) to signed-in users, with offererId matching their UID.
     * @allow (update, delete) only to the user who offered the ride (offererId).
     * @deny (create, update, delete) to unauthorized users.
     * @principle Public read access with owner-only writes, enforces ride ownership.
     */
    match /rides/{rideId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(offererId) {
            return request.auth.uid == offererId;
        }

        allow get, list: if true;

        allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.offererId == request.auth.uid;
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) to signed-in users, with raterId matching their UID.
     * @deny (get, list, update, delete) to anyone.
     */
    match /rides/{rideId}/ratings/{ratingId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}