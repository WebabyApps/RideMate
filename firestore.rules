
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can view a user's public profile.
      allow read: if true;

      // Only the authenticated user can create their own profile document.
      allow create: if isOwner(userId);

      // Only the owner of the profile can update it.
      allow update: if isOwner(userId);

      // Deleting user profiles is not allowed.
      allow delete: if false;
    }

    // Rules for the 'rides' collection
    match /rides/{rideId} {
      // Anyone can read ride information.
      allow read: if true;

      // An authenticated user can create a ride if they are the offerer.
      allow create: if isSignedIn() && isOwner(request.resource.data.offererId);

      // An authenticated user can update a ride if:
      // 1. They are the driver (offerer) making changes.
      // 2. They are a passenger booking a seat (updating riderIds and availableSeats).
      allow update: if isSignedIn() && 
                    (isOwner(resource.data.offererId) || 
                     (request.resource.data.keys().hasAll(['riderIds', 'availableSeats']) && 
                      request.resource.data.riderIds == resource.data.riderIds.concat([request.auth.uid])));

      // Only the driver (offerer) can delete their own ride.
      allow delete: if isSignedIn() && isOwner(resource.data.offererId);
    }
  }
}
