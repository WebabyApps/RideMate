/**
 * @fileOverview Firestore Security Rules for RideMate.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a
 * combination of ownership and shared access for rides and related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /rides/{rideId}: Stores ride information, with access control based on ride ownership and rider list.
 * - /ratings/{ratingId}: Stores ratings, with access control based on the rater and rated user.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages associated with rides; access is restricted to ride participants.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible by their owners.
 * - Rides have an owner (`offererId`) who has write access, and a list of riders (`riderIds`) who have read access.
 * - Ratings can be created by any user but can only be modified or deleted by the creator.
 * - Chat messages are only accessible to users participating in the associated ride.
 *
 * Denormalization for Authorization:
 * - Ride documents include `offererId` and `riderIds` to avoid needing to `get()` user documents for authorization.
 * - Rating documents include `raterId` and `ratedUserId` to avoid needing to `get()` user documents for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride documents.
     * @path /rides/{rideId}
     * @allow (create) - User with UID 'user123' can create a ride with offererId 'user123'.
     * @allow (get, list) - Any user can read ride details or list rides.
     * @allow (update, delete) - Only the user with UID matching the ride's offererId can modify or delete the ride.
     * @deny (create) - User with UID 'user456' cannot create a ride with offererId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify or delete a ride they don't own.
     * @principle Enforces ownership for ride creation and modification, allows public read access.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to rating documents.
     * @path /ratings/{ratingId}
     * @allow (create) - Any authenticated user can create a rating.
     * @allow (get, list) - Any user can read rating details or list ratings.
     * @allow (update, delete) - Only the user who created the rating (raterId) can modify or delete it.
     * @deny (update, delete) - User with UID 'user456' cannot modify or delete a rating they didn't create.
     * @principle Enforces ownership for rating modification and deletion, allows public read access.
     */
    match /ratings/{ratingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.raterId);
      allow delete: if isExistingOwner(resource.data.raterId);
    }

    /**
     * @description Controls access to chat messages within a ride.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) - User who is a rider or offerer can create chat messages.
     * @allow (get, list) - User who is a rider or offerer can read chat messages.
     * @allow (update, delete) - Denied for all users.
     * @deny (create, get, list) - Users not part of the ride are denied access.
     * @principle Restricts access to chat messages to ride participants.
     */
    match /rides/{rideId}/messages/{messageId} {
      allow get, list: if isSignedIn() && (resource.data.senderId == request.auth.uid || get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]));
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    //------------------- Helper Functions -------------------

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}