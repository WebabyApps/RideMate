/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to ride listings.
 * Ratings can only be created by authenticated users for rides they participated in.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /rides/{rideId}: Stores ride information, publicly readable.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a specific ride; restricted to authenticated users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can read or write their own profile.
 * - Ride listings are publicly readable, but write access is not defined in the provided specification.
 * - Ratings can only be created for a ride, not modified or deleted.
 *
 * Denormalization for Authorization:
 * - The rides/{rideId}/ratings collection does not include the rider list inline. This is a problem for security because it requires
 *   a get() call to /rides/{rideId} to verify the rater was a rider.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (get, create, update, delete, list) if the user is not authenticated.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to ride listings.
     * @path /rides/{rideId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) if false, no owner authorization implemented.
     * @deny (create, update, delete) to everyone, no logic to allow writes.
     * @principle Allows public read access to ride listings.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) if the user is authenticated and was a rider.
     * @deny (get, update, delete, list) to everyone.
     * @principle Restricts rating creation to authenticated riders.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}