/**
 * @file Firestore Security Rules for RideMate
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles
 * and a public-read, owner-write model for rides. Ratings are secured under their
 * respective rides and are only writable by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Only the authenticated user can read/write their own profile.
 * - /rides/{rideId}: Stores ride information. Rides are publicly readable, but only the ride offerer can modify them.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a particular ride. Only authenticated users can create ratings.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is enabled for the /rides collection to facilitate discovery.
 * - Denormalization: Rides MUST contain an `offererId` field to enforce ownership.
 *
 * Access Control Patterns:
 * - /users/{userId}: Ownership (users can only access their own data).
 * - /rides/{rideId}: Public Read with Owner-Only Writes.
 * - /rides/{rideId}/ratings/{ratingId}: Authenticated Users Only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *  - request.auth.uid: 'user123'
     *  - request.resource.data.id: 'user123'
     * @allow (get) - User with ID 'user123' reads their profile.
     *  - request.auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' updates their profile.
     *  - request.auth.uid: 'user123'
     * @allow (delete) - User with ID 'user123' deletes their profile.
     *  - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
     *  - request.auth.uid: 'user456'
     *  - request.resource.data.id: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure ride information. Rides are publicly readable, but only the ride offerer can modify them.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read ride information.
     * @allow (create) - User with ID 'user123' creates a ride with offererId 'user123'.
     *  - request.auth.uid: 'user123'
     *  - request.resource.data.offererId: 'user123'
     * @allow (update) - User with ID 'user123' updates a ride where they are the offerer.
     *  - request.auth.uid: 'user123'
     *  - resource.data.offererId: 'user123'
     * @allow (delete) - User with ID 'user123' deletes a ride where they are the offerer.
     *  - request.auth.uid: 'user123'
     *  - resource.data.offererId: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a ride with offererId 'user123'.
     *  - request.auth.uid: 'user456'
     *  - request.resource.data.offererId: 'user123'
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.offererId == resource.data.offererId;
      allow delete: if isSignedIn() && request.resource.data.offererId == resource.data.offererId;
    }

    /**
     * @description Secure ratings for a specific ride. Only authenticated users can create ratings.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - Authenticated user creates a rating for a ride.
     *  - request.auth != null
     * @deny (create) - Unauthenticated user attempts to create a rating.
     *  - request.auth == null
     * @principle Restricts rating creation to authenticated users.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)).data.id == request.auth.uid;
  }

  function isRideOwner(rideId) {
    return request.auth.uid == resource.data.offererId;
  }

  function isExistingRideOwner(rideId) {
    return isSignedIn() && resource.data.offererId == request.auth.uid;
  }
}