rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile: auth.uid == 'user123'
     * @allow (create) User with ID 'user123' can create their own profile: auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their own profile: auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile: auth.uid == 'user123'
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123': auth.uid != 'user123'
     * @deny (create) User with ID 'user456' cannot create the profile of user 'user123': auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree. Validates relational integrity between documents.
     */
    match /users/{userId} {
      // Verifies that the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the requested userId matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Verifies that the user is the existing owner and that the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to rides, but restricts write access to the ride offerer.
     * @path /rides/{rideId}
     * @allow (get) Any user can read a ride.
     * @allow (list) Any user can list rides.
     * @allow (create) User 'user123' can create a ride with offererId 'user123': request.auth.uid == 'user123' && request.resource.data.offererId == 'user123'
     * @allow (update) User 'user123' can update a ride where they are the offerer: auth.uid == 'user123' && resource.data.offererId == 'user123'
     * @allow (delete) User 'user123' can delete a ride where they are the offerer: auth.uid == 'user123' && resource.data.offererId == 'user123'
     * @deny (create) User 'user456' cannot create a ride with offererId 'user123': request.auth.uid == 'user456' && request.resource.data.offererId == 'user123'
     * @deny (update) User 'user456' cannot update a ride offered by 'user123': auth.uid == 'user456' && resource.data.offererId == 'user123'
     * @principle Allows public read access with owner-only writes. Validates relational integrity for create operations.
     */
    match /rides/{rideId} {
      // Verifies that the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the requested userId matches the authenticated user's ID.
      function isOwner(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isOwner(rideId);
      allow delete: if isOwner(rideId);
    }

    /**
     * @description Enforces access control for ride ratings. Allows any authenticated user to create a rating for a ride, but restricts modification/deletion to the rating creator.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (get) Any user can read a rating.
     * @allow (list) Any user can list ratings for a ride.
     * @allow (create) User 'user123' can create a rating with raterId 'user123': auth.uid == 'user123' && request.resource.data.raterId == 'user123'
     * @allow (update) User 'user123' can update their own rating: auth.uid == 'user123' && resource.data.raterId == 'user123'
     * @allow (delete) User 'user123' can delete their own rating: auth.uid == 'user123' && resource.data.raterId == 'user123'
     * @deny (create) User 'user456' cannot create a rating with raterId 'user123': auth.uid == 'user456' && request.resource.data.raterId == 'user123'
     * @deny (update) User 'user456' cannot update a rating created by 'user123': auth.uid == 'user456' && resource.data.raterId == 'user123'
     * @principle Allows public read access with owner-only writes. Scopes ratings to rides.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      // Verifies that the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the requested userId matches the authenticated user's ID.
      function isOwner(ratingId) {
        return get(/databases/$(database)/documents/rides/$(rideId)/ratings/$(ratingId)).data.raterId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isOwner(ratingId);
      allow delete: if isOwner(ratingId);
    }
  }
}