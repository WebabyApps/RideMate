/**
 * @file Firestore Security Rules for RideMate
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a user-ownership model for user profiles,
 * allows public read access to rides, and restricts ride ratings to authenticated users.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profiles. Accessible only by the user themselves.
 * - `/rides/{rideId}`: Stores ride information. Publicly readable.
 * - `/rides/{rideId}/ratings/{ratingId}`: Stores ratings for rides. Only authenticated users can create ratings, and they can only modify/delete their own ratings.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Rides are publicly readable to facilitate discovery. Only authenticated users can create, update and delete rides.
 * - Ride ratings can be created by any authenticated user for any ride. Users can only modify and delete their own ratings.
 * - Listing of users is disallowed.
 *
 * @denormalizationForAuthorization
 * - Ride documents must contain an `offererId` field to identify the user who created the ride for authorization purposes.
 * - Rating documents must contain a `raterId` field to identify the user who created the rating for authorization purposes.
 *
 * @structuralSegregation
 * - No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (create, update, delete) if the user is not the owner of the profile.
     * @deny list: listing users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) public access.
     * @allow (create) only authenticated users can create rides, and the `offererId` must match the authenticated user's ID.
     * @allow (update, delete) only the user who offered the ride can update or delete it.
     * @principle Public read with owner-only writes, enforces that the `offererId` matches the authenticated user's ID on create, and enforces ownership on update and delete.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) any authenticated user can create a rating for a ride, and the `raterId` must match the authenticated user's ID.
     * @allow (get, list) any authenticated user can get/list ratings for a ride.
     * @allow (update, delete) only the user who created the rating can update or delete it.
     * @principle Authenticated users can create ratings, and only the owner can modify or delete their ratings.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
    }
  }
}