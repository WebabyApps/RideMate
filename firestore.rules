/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and rides.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Only the user can read/write their own profile.
 * - /rides/{rideId}: Stores ride information. Only the ride offerer can create/modify a ride.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a ride. Only authenticated users can create a rating for a ride.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user profile.
 * - Ride creation is restricted to authenticated users who are considered the 'offerer'.
 * - Ride modifications and deletions are restricted to the offerer of the ride.
 * - Ratings can be created by any authenticated user for a given ride.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Rides MUST have an `offererId` field that matches the user's UID. This is enforced on create.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) Anyone can read/list rides.
     * @allow (create) Authenticated users can create rides with a matching offererId.
     * @allow (update, delete) Only the ride offerer can update/delete a ride.
     * @deny (create) Users cannot create rides for other users.
     * @deny (update, delete) Users cannot update/delete rides they don't own.
     * @principle Enforces owner-only writes for ride data with public read access.
     */
    match /rides/{rideId} {
      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(offererId) {
        return isSignedIn() && isOwner(offererId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (get, list) Anyone can read/list ratings for a ride.
     * @allow (create) Authenticated users can create ratings for a ride.
     * @deny (update, delete) Ratings cannot be updated or deleted (ratings are immutable).
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}