/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Users can only manage their own data, and access to shared resources is explicitly defined.
 * Unauthenticated access is generally denied, except where public read access is explicitly intended.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /rides: Stores ride information, publicly readable but writable only by the ride offerer.
 * - /rides/{rideId}/ratings: Stores ratings for specific rides, writable only by authenticated users.
 * - /rides/{rideId}/messages: Stores messages for specific rides, writable only by users involved in the ride.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Data validation is relaxed to allow for rapid prototyping.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 * - The `Ride` entity requires the `offererId` field to determine the ride's owner.  This is used to restrict ride modifications and deletion to the offerer.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (list) - Any attempt to list all users.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information. Rides are publicly readable, but only the offerer can modify or delete them.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read ride information.
     * @allow (create) - Authenticated user creates a ride with their userId as the offererId.
     * @allow (update, delete) - Only the ride offerer can update or delete the ride.
     * @deny (create) - Authenticated user attempts to create a ride with a mismatched offererId.
     * @principle Public read access with owner-only writes.
     */
    match /rides/{rideId} {
      function isOwner(offererId) {
        return request.auth != null && request.auth.uid == offererId;
      }
      function isExistingOwner(offererId) {
        return isOwner(offererId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Manages ratings for rides. Any authenticated user can create a rating for a ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - Authenticated user creates a rating.
     * @deny (get, list, update, delete) - No other access is permitted.
     * @principle Authenticated users can add ratings, but no other operations are allowed.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure messages for specific rides.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) - Authenticated user creates a message related to a ride, TODO add partecipant validation (is sender or rider).
     * @deny (get, list, update, delete) - No other access is permitted.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn(); // TODO: Add check to ensure sender is a participant
      allow update: if false;
      allow delete: if false;
    }
  }
}