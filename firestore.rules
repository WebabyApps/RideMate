/**
 * @description This ruleset enforces a strict user-ownership model for user profiles, ride offerings, and ratings. It allows public read access to rides and ratings but restricts modifications to the owners. Chat messages are restricted to users associated with the ride.
 * @data_structure
 *   /users/{userId} : Stores user profile information, owned by the user with matching userId.
 *   /rides/{rideId} : Stores ride information, owned by the user with the offererId.
 *   /ratings/{ratingId} : Stores ride ratings, with raterId and ratedUserId for authorization.
 *   /rides/{rideId}/messages/{messageId} : Stores chat messages for a specific ride.
 * @key_security_decisions
 *   - User listing is not allowed.
 *   - Rides and Ratings are publicly readable but owner-writable.
 *   - Chat messages are restricted to ride participants.
 * @denormalization_for_authorization
 *   - Rides: Include offererId in the Ride document for owner-based authorization.
 *   - Ratings: Include both raterId and ratedUserId for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User A with auth UID "user_a" can create /users/user_a with their profile data.
     * @allow (get, update, delete) - User A with auth UID "user_a" can read, update, or delete /users/user_a.
     * @deny (create) - User B with auth UID "user_b" cannot create /users/user_a.
     * @deny (get, update, delete) - User B with auth UID "user_b" cannot read, update, or delete /users/user_a.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Permissions
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid; // Self-creation with ID validation
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Existing owner and ID immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information. Rides are publicly readable, but only the offerer can modify them.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read any ride.
     * @allow (create) - User A with auth UID "user_a" can create a ride with offererId "user_a".
     * @allow (update, delete) - User A with auth UID "user_a" can update or delete a ride where resource.data.offererId == "user_a".
     * @deny (create) - User B with auth UID "user_b" cannot create a ride with offererId "user_a".
     * @deny (update, delete) - User B with auth UID "user_b" cannot update or delete a ride where resource.data.offererId == "user_a".
     * @principle Allows public read access but enforces ownership for write operations.
     */
    match /rides/{rideId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(offererId) {
        return isSignedIn() && request.auth.uid == offererId;
      }

      function isExistingOwner(offererId) {
        return isOwner(offererId) && resource != null;
      }

      // Permissions
      allow get, list: if true; // Public read access

      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid; // Owner-only creation
      allow update: if isExistingOwner(resource.data.offererId); // Owner-only updates
      allow delete: if isExistingOwner(resource.data.offererId); // Owner-only deletion
    }

    /**
     * @description Controls access to rating information. Ratings are publicly readable, but only the rater can modify them.
     * @path /ratings/{ratingId}
     * @allow (get, list) - Any user can read any rating.
     * @allow (create) - User A with auth UID "user_a" can create a rating with raterId "user_a".
     * @allow (update, delete) - User A with auth UID "user_a" can update or delete a rating where resource.data.raterId == "user_a".
     * @deny (create) - User B with auth UID "user_b" cannot create a rating with raterId "user_a".
     * @deny (update, delete) - User B with auth UID "user_b" cannot update or delete a rating where resource.data.raterId == "user_a".
     * @principle Allows public read access but enforces ownership for write operations.
     */
    match /ratings/{ratingId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(raterId) {
        return isSignedIn() && request.auth.uid == raterId;
      }

      function isExistingOwner(raterId) {
        return isOwner(raterId) && resource != null;
      }

      // Permissions
      allow get, list: if true; // Public read access

      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid; // Owner-only creation
      allow update: if isExistingOwner(resource.data.raterId); // Owner-only updates
      allow delete: if isExistingOwner(resource.data.raterId); // Owner-only deletion
    }

    /**
     * @description Controls access to chat messages associated with a specific ride. Only users involved in the ride can read or write messages.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) - User A with auth UID "user_a" can create a message in a ride if they are a rider or the offerer.
     * @allow (get, list) - User A with auth UID "user_a" can read messages in a ride if they are a rider or the offerer.
     * @allow (update, delete) - No one can update or delete messages.
     * @deny (create, get, list) - User B with auth UID "user_b" cannot create or read messages in a ride if they are not a rider or the offerer.
     * @principle Restricts access to chat messages to participants of the associated ride.
     */
    match /rides/{rideId}/messages/{messageId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isRideParticipant(rideId) {
        return isSignedIn() && get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid])
               || isSignedIn() && get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }

      // Permissions
      allow get, list: if isRideParticipant(rideId);
      allow create: if isRideParticipant(rideId) && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false; // No updates or deletes allowed
    }
  }
}