/**
 * @description This ruleset enforces a user-ownership model for user profiles and creator-ownership for rides, with public read access for rides to facilitate discovery. Chat messages are restricted to ride participants.
 * @dataStructure
 *   - /users/{userId}: User profile data, owned by the user with matching userId.
 *   - /rides/{rideId}: Ride data, owned by the user with offererId.
 *   - /ratings/{ratingId}: Rating data, accessible with restrictions based on raterId and ratedUserId.
 *   - /rides/{rideId}/messages/{messageId}: Chat messages, accessible only to participants of the ride.
 * @keySecurityDecisions
 *   - Users can only read/write their own profile data.
 *   - Rides are publicly readable but only the offerer can modify them.
 *   - Listing of users and ratings is not allowed.
 *   - Chat messages are only accessible to users associated with the ride.
 * @denormalizationForAuthorization
 *   - Rides: The offererId field is used to identify the ride creator.
 *   - Ratings: Both raterId and ratedUserId are included to simplify authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read/write their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/write the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //isSingedIn to avoid unauthorized access
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to ride data. Rides are publicly readable, but only the offerer can modify them.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read ride data.
     * @allow (create) - User with UID 'user123' can create a ride with offererId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete a ride where resource.data.offererId == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a ride with offererId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a ride where resource.data.offererId == 'user123'.
     * @principle Public read access with owner-only writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.offererId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to rating data.
     * @path /ratings/{ratingId}
     * @allow (create) - User with UID 'user123' can create a rating with raterId 'user123'.
     * @allow (get, update, delete) - Only the user who created the rating (raterId) can modify it.
     * @deny (create) - User with UID 'user456' cannot create a rating with raterId 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/write a rating where resource.data.raterId == 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /ratings/{ratingId} {
      allow get: if isSignedIn() && (resource.data.ratedUserId == request.auth.uid || resource.data.raterId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.raterId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.raterId);
    }

    /**
     * @description Controls access to chat messages within a ride. Only ride participants can create, read, update or delete messages.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) - User with UID 'user123' can create a message in ride 'ride456' if they are a rider or the offerer.
     * @allow (get, list) - User with UID 'user123' can read messages in ride 'ride456' if they are a rider or the offerer.
     * @deny (create) - User with UID 'user456' cannot create a message in ride 'ride456' if they are not a rider or the offerer.
     * @deny (get, list) - User with UID 'user456' cannot read messages in ride 'ride456' if they are not a rider or the offerer.
     * @principle Restricts access to ride participants.
     */
    match /rides/{rideId}/messages/{messageId} {
      allow get, list: if isSignedIn() && (get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]) || get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid);
      allow create: if isSignedIn() && (get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]) || get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid);
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return request.auth.uid == ownerId && resource != null;
    }
  }
}