/**
 * @file Firestore Security Rules for RideMate
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a user-centric security model for the RideMate application.
 * Users can only create, modify, or delete their own user profiles and rides.
 * Ratings are secured such that only authenticated users can create them for rides,
 * while updates and deletes are disallowed.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profiles.  Each user document's ID must match the Firebase Auth UID.
 * - `/rides/{rideId}`: Stores ride information.  Each ride document has an `offererId` field linking back to the user who offered the ride.
 * - `/rides/{rideId}/ratings/{ratingId}`: Stores ratings for rides.  Each rating has `raterId` and `ratedRideId` fields.
 *
 * @keySecurityDecisions
 * - Users can only manage their own profiles. Listing all users is disallowed.
 * - Rides can be created, updated, and deleted only by the ride offerer.
 * - Ratings can only be created by authenticated users and cannot be updated or deleted.
 *
 * @denormalizationForAuthorization
 * - The `Ride` entity includes an `offererId` field. This is used to enforce ownership for write operations on rides.  Without this, it would be impossible to determine who owns a given ride.
 *
 * @structuralSegregation
 * - There are no public vs. private data requirements. All collections are secured using the ownership or shared access patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can only access or modify their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - A user cannot create a profile with an ID that does not match their auth UID.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      //Function to check if user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      //Function to check if the authenticated user's id matches the document id
      function isOwner(userId) {
          return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to ride documents.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read ride data.
     * @allow (create) - Only authenticated users can create rides, with the `offererId` matching their UID.
     * @allow (update, delete) - Only the user who offered the ride can modify or delete it.
     * @deny (create) - Creating a ride with an `offererId` that doesn't match the auth UID is not allowed.
     * @principle Enforces ownership for ride management, allowing public read access.
     */
    match /rides/{rideId} {
      //Function to check if user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      //Function to check if the authenticated user's id matches the offererId
      function isOwner() {
          return request.auth.uid == resource.data.offererId;
      }

      // Helper function to check if the authenticated user is the existing owner
      function isExistingOwner() {
          return request.auth.uid == resource.data.offererId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - Only authenticated users can create ratings for rides, ensuring `raterId` matches the user.
     * @deny (get, list, update, delete) - Reading, listing, updating, and deleting ratings are not allowed.
     * @principle Prevents modification or deletion of ratings.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      //Function to check if user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}