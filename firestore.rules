/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Users can only read and modify their own profile data.
 * Rides are publicly readable but can only be created, updated, or deleted by the ride offerer.
 * Ratings can be created by any authenticated user for a ride, but updates and deletes are disallowed for simplicity.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. The userId in the path must match the user's authentication UID.
 * - /rides/{rideId}: Stores ride information.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings associated with a specific ride.
 *
 * Key Security Decisions:
 * - Users cannot list all users. This prevents potential information harvesting.
 * - Ratings can be created by anyone for any ride.
 * - Data validation is relaxed during the prototyping phase to allow for rapid iteration and schema changes.
 *
 * Denormalization for Authorization:
 * - The 'offererId' field is used within Ride documents to check ownership.  This allows rules on /rides/{rideId} to be checked without further reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their own profile if the document ID matches their UID.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (get) User with UID 'user456' cannot read the profile of user with UID 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile for user with UID 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user with UID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of user with UID 'user123'.
     * @principle Enforces document ownership for writes.  Restricts access to a user's own data tree.  Validates relational integrity between documents.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Users cannot list all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information. Rides are publicly readable. Only the ride offerer can create, update, or delete a ride.
     * @path /rides/{rideId}
     * @allow (get) Any user can read ride information.
     * @allow (list) Any user can list ride information.
     * @allow (create) User with UID 'user123' can create a ride if they are the offerer.
     * @allow (update) User with UID 'user123' can update a ride if they are the offerer.
     * @allow (delete) User with UID 'user123' can delete a ride if they are the offerer.
     * @deny (create) User with UID 'user456' cannot create a ride for another user.
     * @deny (update) User with UID 'user456' cannot update a ride they don't own.
     * @deny (delete) User with UID 'user456' cannot delete a ride they don't own.
     * @principle Public read access with owner-only writes.
     */
    match /rides/{rideId} {
      allow get: if true;
      allow list: if true;

      function isRideOfferer(offererId) {
        return request.auth.uid == offererId;
      }

      function isExistingRideOfferer(rideId) {
        return isSignedIn() && resource.data.offererId == request.auth.uid;
      }

      allow create: if isSignedIn() && isRideOfferer(request.resource.data.offererId);
      allow update: if isExistingRideOfferer(rideId);
      allow delete: if isExistingRideOfferer(rideId);
    }

    /**
     * @description Controls access to ride ratings. Any authenticated user can create a rating for a ride. Updates and deletes are disallowed.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (get) Any user can read a rating.
     * @allow (list) Any user can list ratings for a ride.
     * @allow (create) User with UID 'user123' can create a rating for a ride.
     * @deny (update) No user can update a rating.
     * @deny (delete) No user can delete a rating.
     * @principle Allows creation by anyone, but no modifications.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}