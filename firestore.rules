/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the RideMate application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves can read/write their profile.
 * - /rides: Stores all ride data. Rides are publicly readable, but creation, updates, and deletion are restricted to the ride offerer.
 * - /rides/{rideId}/ratings: Stores ratings for a specific ride. Only authenticated users can create ratings.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Rides are publicly visible to facilitate discovery.
 * - Rides can be created by any authenticated user.
 * - Only ride offerers can modify/delete rides.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to rides, but restricts write access to the ride offerer.
     * @path /rides
     * @allow (get, list) Any user can read ride data.
     * @allow (create) User 'user123' can create a ride with offererId 'user123'.
     * @allow (update, delete) User 'user123' can update/delete a ride where resource.data.offererId == 'user123'.
     * @deny (create) User 'user123' cannot create a ride with offererId 'user456'.
     * @deny (update, delete) User 'user456' cannot update/delete a ride where resource.data.offererId == 'user123'.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Allows authenticated users to create ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) User 'user123' can create a rating for ride 'ride456'.
     * @deny (create) Unauthenticated user cannot create a rating.
     * @principle Requires authentication for rating creation.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return request.auth.uid == ownerId && resource != null;
    }
  }
}