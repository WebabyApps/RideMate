/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows public read access to rides.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves.
 * - /rides/{rideId}: Stores ride information. Public read access is allowed. Write access is restricted to the ride offerer.
 * - /rides/{rideId}/ratings: Stores ratings for a specific ride. Write access is restricted to the rating rater.
 * - /rides/{rideId}/messages: Stores messages related to a specific ride. Access is restricted to sender or receiver of the message.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Rides are publicly readable, but only the ride offerer can modify or delete them.
 * - Ratings can only be created by the rater.
 * - Messages are restricted to sender or receiver.
 *
 * Denormalization for Authorization:
 * - The `Ride` entity has an `offererId` field, which is used to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, list, update, delete) User with matching ID can access their profile.
     * @deny (create) User cannot create a profile with an ID that does not match their own.
     * @deny (get, list, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Users collection should not be listable for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to ride data.
     * @path /rides/{rideId}
     * @allow (get, list) All users can read ride data.
     * @allow (create) User can create rides if offererId matches their user ID.
     * @allow (update, delete) Only the ride offerer can update or delete a ride.
     * @deny (create) User cannot create a ride with an offererId that does not match their own.
     * @deny (update, delete) User cannot modify or delete a ride they do not own.
     * @principle Public read, owner-only writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.offererId == request.auth.uid;
      allow update: if request.auth != null && resource.data.offererId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.offererId == request.auth.uid;
    }

    /**
     * @description Controls access to ride ratings.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) A user can create a rating for a ride if the raterId matches their user ID.
     * @deny (get, list, update, delete) No one can list, get, update or delete a rating.
     * @principle Only creator can create the rating.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get: if false;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.raterId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to messages for rides.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) Users can create a message for a ride if the senderId or receiverId matches their ID.
     * @deny (get, list, update, delete) No one can get, list, update, or delete a message
     * @principle Sender or Receiver.
     */
    match /rides/{rideId}/messages/{messageId} {
      allow get: if false;
      allow list: if false;
      allow create: if request.auth != null && (request.resource.data.senderId == request.auth.uid || request.resource.data.receiverId == request.auth.uid);
      allow update: if false;
      allow delete: if false;
    }
  }
}