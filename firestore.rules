/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset prioritizes a balance between strict authorization and flexible data shapes for prototyping.
 *  It enforces user-ownership for user data and allows public read access for rides, while restricting ride modification to the offerer.
 * @data-structure
 *  - /users/{userId}: Stores user profiles, accessible only to the owning user.
 *  - /rides: Stores ride information, publicly readable, but write-protected to the ride offerer.
 *  - /rides/{rideId}/ratings: Stores ratings for specific rides; creation and modification are restricted to authenticated users.
 * @key-security-decisions
 *  - Public ride listings: The /rides collection is publicly readable to facilitate discovery.
 *  - User data isolation: Each user can only access their own data under /users/{userId}.
 *  - Denormalization for authorization: Ride documents contain an `offererId` field to simplify ownership checks for updates and deletes.
 * @denormalization-for-authorization Ride documents contain an `offererId` field to simplify ownership checks for updates and deletes.
 * @structural-segregation Rides are stored in a top-level collection for public discoverability, while user data is stored under /users/{userId} for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a document at /users/user_abc
     * @allow (get) - User with UID 'user_abc' can read the document at /users/user_abc
     * @allow (update) - User with UID 'user_abc' can update the document at /users/user_abc
     * @allow (delete) - User with UID 'user_abc' can delete the document at /users/user_abc
     * @deny (create) - User with UID 'user_def' cannot create a document at /users/user_abc
     * @deny (update) - User with UID 'user_def' cannot update the document at /users/user_abc
     * @deny (delete) - User with UID 'user_def' cannot delete the document at /users/user_abc
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read the list of rides, but only the offerer can create, update, or delete.
     * @path /rides
     * @allow (get) - Any user, authenticated or not, can read a ride.
     * @allow (list) - Any user, authenticated or not, can list rides.
     * @allow (create) - User with UID 'user_abc' can create a ride with offererId: 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update a ride they offered.
     * @allow (delete) - User with UID 'user_abc' can delete a ride they offered.
     * @deny (create) - User with UID 'user_def' cannot create a ride with offererId: 'user_abc'.
     * @deny (update) - User with UID 'user_def' cannot update a ride offered by 'user_abc'.
     * @deny (delete) - User with UID 'user_def' cannot delete a ride offered by 'user_abc'.
     * @principle Public read access with owner-only writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Allows authenticated users to create ratings for a ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - User with UID 'user_abc' can create a rating for ride 'ride_xyz'.
     * @allow (get) - User with UID 'user_abc' can get a rating for ride 'ride_xyz'.
     * @allow (list) - User with UID 'user_abc' can list ratings for ride 'ride_xyz'.
     * @deny (create) - Unauthenticated user cannot create a rating.
     * @principle Restricts access to a user's own data.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.raterId == request.auth.uid && resource.data.raterId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.raterId == request.auth.uid && resource.data.raterId == request.auth.uid && resource != null;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}