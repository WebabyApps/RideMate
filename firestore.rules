/**
 * @fileOverview Firestore Security Rules for RideMate.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by enforcing strict ownership for user profiles
 * and provides open read access to ride listings while restricting write access to ride owners.
 * The ruleset also governs access to ride ratings, ensuring that only authenticated users can create ratings
 * for rides, with owner-only access for updates and deletes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /rides: Stores ride information, publicly readable but writable only by the ride owner.
 * - /rides/{rideId}/ratings: Stores ratings for each ride.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data; listing all users is disallowed.
 * - Rides are publicly readable, enabling discovery and participation, but only the ride owner can modify ride data.
 * - Ratings can be created by any authenticated user, but only the rating owner can modify or delete them.
 *
 * Denormalization for Authorization:
 * - Ride documents contain the `offererId` to simplify owner checks for rides.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the user can read and write their data.
     * @path /users/{userId}
     * @allow (create) - User 'alice' with ID 'alice' can create her profile.
     *   `request.auth.uid == 'alice' && request.resource.data.id == 'alice'`
     * @allow (get, update, delete) - User 'alice' with ID 'alice' can read and modify her profile.
     *   `request.auth.uid == 'alice' && resource.data.id == 'alice'`
     * @deny (create) - User 'bob' cannot create a profile for 'alice'.
     *   `request.auth.uid == 'bob' && request.resource.data.id == 'alice'`
     * @deny (get, update, delete) - User 'bob' cannot read or modify 'alice's profile.
     *   `request.auth.uid == 'bob' && resource.data.id == 'alice'`
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages ride listings, allowing public read access but restricting write access to the ride offerer.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can read ride listings.
     * @allow (create) - User 'bob' with ID 'bob' can create a ride with offererId 'bob'.
     *   `request.auth.uid == 'bob' && request.resource.data.offererId == 'bob'`
     * @allow (update, delete) - User 'bob' with ID 'bob' can modify his ride where offererId is 'bob'.
     *   `request.auth.uid == 'bob' && resource.data.offererId == 'bob'`
     * @deny (create) - User 'alice' cannot create a ride listing with offererId 'bob'.
     *   `request.auth.uid == 'alice' && request.resource.data.offererId == 'bob'`
     * @deny (update, delete) - User 'alice' cannot modify a ride offered by 'bob'.
     *   `request.auth.uid == 'alice' && resource.data.offererId == 'bob'`
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /rides/{rideId} {
      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }
       function isExistingOwner(offererId) {
        return isOwner(offererId) && exists(resource);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.offererId);
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to ride ratings, allowing creation by any authenticated user,
     *              but restricting updates and deletes to the rating owner.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - User 'alice' can create a rating for a ride.
     *   `request.auth.uid != null && request.resource.data.raterId == request.auth.uid`
     * @allow (get, list) - Any user can read ratings for a ride.
     * @allow (update, delete) - User 'alice' can update or delete her rating for a ride.
     *   `request.auth.uid == resource.data.raterId`
     * @deny (update, delete) - User 'bob' cannot update or delete 'alice's rating.
     *   `request.auth.uid == 'bob' && resource.data.raterId == 'alice'`
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isOwner(raterId) {
        return request.auth.uid == raterId;
      }
       function isExistingOwner(raterId) {
        return isOwner(raterId) && exists(resource);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.raterId);
      allow delete: if isExistingOwner(resource.data.raterId);
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}