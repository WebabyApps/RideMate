/**
 * @file Firebase Security Rules for RideMate application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and rides.
 *   Users can only read and write their own profile data. Rides are also owned by the user who created them.
 *   Ratings can only be created for existing rides by authenticated users, and are associated with a ride.
 *   Queries for 'rides' data is handled by a server route, therefore the client side list operation is denied.
 *
 * @data_structure
 *   - /users/{userId}: Stores user profile data.
 *   - /rides/{rideId}: Stores ride information, including the offerer's user ID.
 *   - /rides/{rideId}/ratings/{ratingId}: Stores ratings for a specific ride.
 *
 * @key_security_decisions
 *   - User listing is disabled.
 *   - Default security posture is strict; any access not explicitly allowed is denied.
 *   - The `rides` collection can only be queried via a server route. Thus client side `list` operations are disabled.
 *
 * @denormalization_for_authorization
 *   - Rides have an `offererId` field, which is used to verify ownership for update and delete operations. This avoids having to perform additional reads to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's ID matches the userId, allowing self-registration.
     * @allow (get, update, delete) - If the authenticated user's ID matches the userId, allowing access to their own profile.
     * @deny (list) - Prevents listing all users.
     * @deny (create) - If the authenticated user's ID does not match the userId.
     * @deny (update, delete) - If the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to get, update, and delete their own profile if the userId matches their auth UID and document exists.
      allow get, update, delete: if isOwner(userId) && resource != null;

      // Prevent listing all users.
      allow list: if false;
    }

    /**
     * @description Controls access to ride data.
     * @path /rides/{rideId}
     * @allow (create) - If the authenticated user's ID matches the offererId, allowing ride creation.
     * @allow (get, update, delete) - If the authenticated user's ID matches the offererId and document exists, allowing ride management by the owner.
     * @deny (list) - Prevents listing all rides (queries handled by server route).
     * @deny (create) - If the authenticated user's ID does not match the offererId.
     * @deny (update, delete) - If the authenticated user's ID does not match the offererId.
     * @principle Enforces document ownership for all operations on ride data.
     */
    match /rides/{rideId} {
      // Helper function to check if the request is made by the offerer of the ride
      function isOfferer(offererId) {
        return request.auth != null && request.auth.uid == offererId;
      }

      // Allow a user to create a ride if the offererId matches their auth UID.
      allow create: if isOfferer(request.resource.data.offererId) && request.resource.data.id == rideId;

      // Allow a user to get, update, and delete their own rides if the offererId matches their auth UID and document exists.
      allow get, update, delete: if isOfferer(resource.data.offererId) && resource != null;

      // Prevent listing all rides (handled by server route).
      allow list: if false;
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) - If the user is authenticated and provides a valid rideId.
     * @allow (get) - If the rating exists.
     * @allow (list) - If the user is authenticated.
     * @deny (update, delete) - Ratings cannot be updated or deleted by clients.
     * @principle Authenticated users can create and read ratings for rides, but cannot modify or delete them.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow creation of ratings if the user is signed in
      allow create: if isSignedIn() && request.resource.data.ratedRideId == rideId;

      // Allow reading of ratings
      allow get: if true;

      // Allow listing of ratings if the user is signed in
      allow list: if isSignedIn();

      // Prevent updates and deletes of ratings
      allow update, delete: if false;
    }
  }
}