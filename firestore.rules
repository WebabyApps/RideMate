/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default approach, requiring user authentication for most data access.
 * It enforces ownership and restricts unauthorized data modification. The rules are designed for rapid prototyping,
 * focusing on authorization rather than strict data validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can access their own profile.
 * - /rides/{rideId}: Stores ride information. Any authenticated user can read ride information. Only the ride offerer can create, update, or delete rides.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for rides. Only authenticated users can create ratings for rides. Only the rating's author can update or delete it.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no `list` rule on `/users`).
 * - All write operations require authentication.
 * - Data validation is relaxed for rapid prototyping, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Ride documents contain an `offererId` field to enable owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (create, update, delete) Unauthorized user attempts to access or modify another user's profile.
     * @deny (list) Listing users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) Any authenticated user can read ride information.
     * @allow (create) Authenticated user can create ride. The `offererId` must match the authenticated user's UID.
     * @allow (update, delete) Only the ride offerer can update or delete rides.
     * @deny (create) Unauthorized user attempts to create ride with `offererId` that doesn't match the authenticated user's UID.
     * @deny (update, delete) Unauthorized user attempts to modify or delete rides they don't own.
     * @principle Enforces ownership for ride creation, updates, and deletion. Allows public read access for authenticated users.
     */
    match /rides/{rideId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.offererId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) Authenticated user can create a rating for a ride. The `raterId` must match the authenticated user's UID.
     * @allow (get, list) Any authenticated user can read ratings for rides.
     * @allow (update, delete) Only the rating's author can update or delete it.
     * @deny (create) Unauthorized user attempts to create rating with `raterId` that doesn't match the authenticated user's UID.
     * @deny (update, delete) Unauthorized user attempts to modify or delete ratings they don't own.
     * @principle Enforces ownership for rating creation, updates, and deletion. Allows public read access for ratings.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.raterId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.raterId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}