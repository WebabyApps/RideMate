/**
 * @file Firebase Security Rules for RideMate
 *
 * @description This ruleset enforces a user-ownership model for user profiles,
 * and a combination of ownership and shared access for rides and chat messages.
 * Ratings are accessible to anyone.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information.
 * - /rides/{rideId}: Stores ride information, including offerer and rider data.
 * - /ratings/{ratingId}: Stores ride ratings.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages for specific rides.
 *
 * @keySecurityDecisions
 * - User profiles are strictly owned by the user with matching UID.
 * - Rides are owned by the offerer, who can modify them.
 * - Chat messages within rides are accessible to ride participants.
 * - Ratings are publicly readable but only created by authenticated users, with restrictions on modification.
 * - Listing of ratings and rides is allowed, but listing of users and chat messages is restricted to the owner.
 * - No data validation is performed beyond authorization checks in this prototype.
 *
 * @denormalizationForAuthorization
 * - Rides: The `Ride` document includes `offererId` for easy identification of the ride creator.
 * - Ratings: The `Rating` document includes both `raterId` and `ratedUserId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles by enforcing strict user-ownership.
     * @path /users/{userId}
     * @allow (read, write) Authenticated user with matching UID.
     * @deny (read, write) Any other user or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure rides by allowing the offerer to modify them.
     * @path /rides/{rideId}
     * @allow (read) Publicly readable.
     * @allow (create, update, delete) Authenticated user with matching offererId.
     * @deny (create, update, delete) Any other user or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.offererId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.offererId && resource != null;
    }

    /**
     * @description Secure ratings by allowing any authenticated user to create them.
     * @path /ratings/{ratingId}
     * @allow (read) Publicly readable.
     * @allow (create) Authenticated user.
     * @deny (update, delete) Any user.
     */
    match /ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Secure chat messages by allowing ride participants to create them.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) Authenticated user who is a rider in the ride.
     * @deny (read, update, delete, list) Any user.
     * @principle Restricts access to a user's own data tree.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is a participant in the ride.
      function isRideParticipant(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]) ||
               get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }

      allow get: if isSignedIn() && isRideParticipant(rideId);
      allow list: if isSignedIn() && isRideParticipant(rideId);
      allow create: if isSignedIn() && isRideParticipant(rideId) && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}