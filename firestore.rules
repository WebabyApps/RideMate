/**
 * @file Firebase Security Rules for RideMate
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles
 * and a public-read, owner-write model for rides. Ratings are secured under their
 * respective rides, allowing only authenticated users to create them, but without editing.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles.
 * - /rides/{rideId}: Stores ride information.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for rides.
 * 
 * @key_security_decisions
 * - Users can only read and write their own profiles.
 * - Rides are publicly readable but only the offerer can modify them.
 * - Ride listings are public.
 * - Ratings can only be created by authenticated users for a specific ride,
 *   and only the rating creator can edit them.
 *
 * @denormalization_for_authorization
 * - Ride documents contain an `offererId` field for easy owner validation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the user is the owner of the profile.
     * @deny (create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to rides. Rides are publicly readable,
     *              but only the ride offerer can modify them.
     * @path /rides/{rideId}
     * @allow (get, list) to anyone.
     * @allow (create) if the offererId in the request matches the user's ID.
     * @allow (update, delete) if the user is the offerer of the ride.
     * @deny (create, update, delete) if the user is not the offerer.
     * @principle Allows public read access with owner-only write access.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth.uid == resource.data.offererId;
      }
      function isCreatingOwner() {
        return request.auth.uid == request.resource.data.offererId;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Controls access to ratings for a specific ride.
     *              Only authenticated users can create ratings. Only the rater can update the rating.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) if the user is signed in and the raterId matches the user's ID.
     * @allow (get, list) to anyone.
     * @allow (update, delete) if the user is the creator of the rating.
     * @deny (create) if the user is not signed in or the raterId doesn't match.
     * @deny (update, delete) if the user is not the creator of the rating.
     * @principle Allows authenticated users to rate rides.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth.uid == resource.data.raterId;
      }
     function isCreatingOwner() {
        return request.auth.uid == request.resource.data.raterId;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }
  }
}