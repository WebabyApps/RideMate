/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Users can only read and write their own profile data.
 * Rides are publicly readable but can only be created, updated, or deleted by the ride offerer. Ratings are specific to rides,
 * and any authenticated user can create a rating for a ride.  Updates and deletes of Ratings are disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /rides/{rideId}: Stores ride information.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for each ride.
 *
 * Key Security Decisions:
 * - Users can only read their own profile, preventing unauthorized access to user data.
 * - Rides are publicly listable to facilitate discovery.
 * - Users can only create ratings for rides. Modification or deletion of ratings is disallowed to preserve rating integrity.
 *
 * Denormalization for Authorization:
 * - The `Ride` entity includes an `offererId` field to simplify the owner check for rides.  This avoids needing to query a separate
 *   collection to determine the ride's owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile with an ID that doesn't match their own.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information. Rides are publicly readable, but only the ride offerer can modify them.
     * @path /rides/{rideId}
     * @allow (get) Any user can read ride information.
     * @allow (list) Any user can list ride information.
     * @allow (create) Authenticated user can create a ride with their ID as the offererId.
     * @allow (update) Authenticated user can update a ride if they are the offerer.
     * @allow (delete) Authenticated user can delete a ride if they are the offerer.
     * @deny (create) Unauthenticated user cannot create a ride.
     * @deny (update) User cannot update a ride if they are not the offerer.
     * @deny (delete) User cannot delete a ride if they are not the offerer.
     * @principle Enforces ownership for ride creation, updates, and deletion.
     */
    match /rides/{rideId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerOfRide(resource.data.offererId);
      allow delete: if isSignedIn() && isExistingOwnerOfRide(resource.data.offererId);
    }

    /**
     * @description Controls access to ride ratings. Any authenticated user can create a rating for a ride. Updates and deletes are disallowed.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (get) Any user can read ride rating.
     * @allow (list) Any user can list ride ratings.
     * @allow (create) Authenticated user can create a rating for a ride.
     * @deny (update) No user can update a ride rating.
     * @deny (delete) No user can delete a ride rating.
     * @principle Allows creation of ratings by any authenticated user, but disallows modification or deletion of ratings.
     */
    match /rides/{rideId}/ratings/{ratingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isExistingOwnerOfRide(offererId) {
        return request.auth.uid == offererId && resource != null;
    }
  }
}