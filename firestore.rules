rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): User with matching UID.
     * @deny (get, create, update, delete, list): User with non-matching UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list): Public access.
     * @allow (create): Only the offerer can create a ride, and `offererId` must match the auth UID.
     * @allow (update, delete): Only the offerer can modify or delete the ride.
     * @principle Enforces owner-only writes for ride data.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.offererId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to ride ratings.
     * @path /ratings/{ratingId}
     * @allow (get, list): Public access.
     * @deny (create, update, delete): Restricted to authorized users.
     * @principle Restricts writes to ratings without specific authorization (e.g., admin role).
     */
    match /ratings/{ratingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to chat messages for a specific ride.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (get, list): Only participants of the ride can read messages.
     * @allow (create): Only participants of the ride can create messages.
     * @deny (update, delete): No one can edit or delete messages.
     * @principle Restricts chat message access to ride participants.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRideParticipant(rideId) {
        let ride = get(/databases/$(database)/documents/rides/$(rideId)).data;
        return ride.riderIds.hasAny([request.auth.uid]) || ride.offererId == request.auth.uid;
      }

      allow get, list: if isSignedIn() && isRideParticipant(rideId);
      allow create: if isSignedIn() && isRideParticipant(rideId);
      allow update, delete: if false;
    }
  }
}