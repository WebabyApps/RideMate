/**
 * @file Firestore Security Rules for RideMate
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and ride offerings. Ride data is generally public for reading but restricted to the ride offerer for modifications. Chat messages are restricted to participants of a specific ride.
 * @data_structure User profiles are stored under `/users/{userId}`, rides under `/rides/{rideId}`, ratings under `/ratings/{ratingId}` and chat messages under `/rides/{rideId}/messages/{messageId}`.
 * @key_security_decisions
 *   - User listing is not explicitly denied but depends on the default "allow list: if false;" behavior for collections without public read access.
 *   - Rides are publicly readable but only the offerer can modify them.
 *   - Chat message access is restricted to users associated with a ride.
 *   - Updating `riderIds` requires write access, which is restricted to the offerer.
 * @denormalization_for_authorization The `offererId` field in the `Ride` document is crucial for authorization, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their profile.
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete profile of 'user123'.
     *   - request.auth.uid: 'user456'
     *   - resource.data.id: 'user123'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages ride data, allowing public read access but restricting writes to the ride offerer.
     * @path /rides/{rideId}
     * @allow (get, list) Any user can read and list rides.
     * @allow (create) User with ID 'user123' can create a ride with offererId 'user123'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.offererId: 'user123'
     * @allow (update, delete) User with ID 'user123' can update/delete a ride where they are the offerer.
     *   - request.auth.uid: 'user123'
     *   - resource.data.offererId: 'user123'
     * @deny (create) User with ID 'user456' cannot create a ride with offererId 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.offererId: 'user123'
     * @deny (update, delete) User with ID 'user456' cannot update/delete a ride where 'user123' is the offerer.
     *   - request.auth.uid: 'user456'
     *   - resource.data.offererId: 'user123'
     * @principle Enforces owner-only writes for ride modifications.
     */
    match /rides/{rideId} {
      function isRideOfferer(offererId) {
        return request.auth != null && request.auth.uid == offererId;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.offererId == request.auth.uid;
      allow update: if isRideOfferer(resource.data.offererId) && resource != null;
      allow delete: if isRideOfferer(resource.data.offererId) && resource != null;
    }

    /**
     * @description Controls access to ride ratings, allowing only authenticated users to create and read.  Write operations are limited to the rater.
     * @path /ratings/{ratingId}
     * @allow (create) User with ID 'user123' can create a rating with raterId 'user123'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.raterId: 'user123'
     * @allow (get, list) Any authenticated user can read and list ratings.
     *   - request.auth.uid: 'user123'
     * @allow (update, delete) User with ID 'user123' can update/delete a rating where they are the rater.
     *   - request.auth.uid: 'user123'
     *   - resource.data.raterId: 'user123'
     * @deny (create) User with ID 'user456' cannot create a rating with raterId 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.raterId: 'user123'
     * @deny (update, delete) User with ID 'user456' cannot update/delete a rating where 'user123' is the rater.
     *   - request.auth.uid: 'user456'
     *   - resource.data.raterId: 'user123'
     * @principle Enforces rater-only writes for rating modifications.
     */
    match /ratings/{ratingId} {
      function isRater(raterId) {
        return request.auth != null && request.auth.uid == raterId;
      }

      allow get, list: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.raterId == request.auth.uid;
      allow update: if isRater(resource.data.raterId) && resource != null;
      allow delete: if isRater(resource.data.raterId) && resource != null;
    }

    /**
     * @description Secures chat messages within a ride, restricting access to ride participants.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) User with ID 'user123' can create a message if they are a rider or offerer of the ride.
     *   - request.auth.uid: 'user123'
     *   - (Requires `get()` to check ride document for `riderIds` or `offererId`)
     * @allow (get, list) User with ID 'user123' can read messages if they are a rider or offerer of the ride.
     *   - request.auth.uid: 'user123'
     *   - (Requires `get()` to check ride document for `riderIds` or `offererId`)
     * @deny (update, delete) No one can update or delete chat messages (prototype mode).
     * @principle Restricts chat access to ride participants; requires a `get()` call to the parent ride document.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isRideParticipant(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]) || get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }
      allow get, list: if request.auth != null && isRideParticipant(rideId);
      allow create: if request.auth != null && isRideParticipant(rideId);
      allow update, delete: if false; // No updates or deletes in this prototype
    }
  }
}