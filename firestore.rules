/**
 * @file Firestore Security Rules for RideMate
 * @description This ruleset enforces a user-centric security model, ensuring users can only
 *              access their own profile data and participate in rides they are associated with.
 *              It also allows public read access to rides with owner-only writes.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /rides/{rideId}: Stores ride information, including offerer and riders.
 * - /rides/{rideId}/ratings/{ratingId}: Stores ratings for specific rides.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Rides are publicly readable, but only the offerer can modify them.
 * - Ratings can only be created by users who are riders in the rated ride.
 *
 * Denormalization for Authorization:
 * - Rides include `offererId` to simplify ownership checks for ride modifications.
 * - Ratings are stored as subcollections of rides to easily associate them with a ride.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     * @deny (get, update, delete) User with ID 'user456' tries to read/update/delete user 'user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function isSignedIn() {
        //return request.auth != null;
      //}

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages ride access. Rides are publicly readable, but only the offerer can modify them.
     * @path /rides/{rideId}
     * @allow (get, list) Any user can read or list rides.
     * @allow (create) User 'user123' creates a ride with offererId 'user123'.
     * @allow (update, delete) User 'user123' updates/deletes a ride where offererId == 'user123'.
     * @deny (update, delete) User 'user456' tries to update/delete a ride where offererId == 'user123'.
     * @principle Public read, owner-only writes for rides.
     */
    match /rides/{rideId} {

      function isOwner(offererId) {
        return request.auth.uid == offererId;
      }

      function isExistingOwner(offererId) {
        return isOwner(offererId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Manages ratings for a specific ride. Only riders can create ratings.
     * @path /rides/{rideId}/ratings/{ratingId}
     * @allow (create) User 'user123' creates a rating for ride 'ride456' if they are a rider.
     * @deny (create) User 'user456' tries to create a rating for ride 'ride456' if they are not a rider.
     * @deny (get, list, update, delete) No one can list, update, or delete a rating
     * @principle Restricts rating creation to riders only.
     */
    match /rides/{rideId}/ratings/{ratingId} {

      function isRider(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]);
      }

      allow get, list, update, delete: if false;
      allow create: if isRider(rideId);
    }
  }
}