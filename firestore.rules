/**
 * @fileOverview Firestore Security Rules for RideMate.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a
 * combination of ownership and shared access for rides and related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /rides/{rideId}: Stores ride information, with access control based on
 *   the ride offerer and participating riders.
 * - /ratings/{ratingId}: Stores ratings, accessible to the rater and the rated
 *   user.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages associated with a
 *   specific ride, accessible to ride participants.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Rides have an offerer who can modify the ride, and riders who can
 *   participate in the ride.
 * - Ratings are accessible to both the rater and the rated user.
 * - Chat messages are accessible to participants of the associated ride.
 * - Listing of all users is disallowed to protect user privacy. Listing of rides and ratings is public.
 *
 * Denormalization for Authorization:
 * - Ride documents include `offererId` and `riderIds` to avoid `get()` calls
 *   when checking ride offerer or rider status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access/modify their own profile.
     * @deny (create) - If userId does not match auth.uid.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to ride information.
     * @path /rides/{rideId}
     * @allow (get, list) - Anyone can read ride information.
     * @allow (create) - Only authenticated users can create rides, and `offererId` must match `auth.uid`.
     * @allow (update, delete) - Only the ride offerer can update or delete the ride.
     * @deny (create) - If `offererId` does not match `auth.uid`.
     * @deny (update, delete) - If the user is not the ride offerer.
     * @principle Allows public read access but restricts write access to the offerer.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOfferer(offererId) {
        return request.auth.uid == offererId;
      }

      function isExistingOfferer(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOfferer(rideId);
      allow delete: if isSignedIn() && isExistingOfferer(rideId);
    }

    /**
     * @description Controls access to rating information.
     * @path /ratings/{ratingId}
     * @allow (get, list) - Anyone can read rating information.
     * @allow (create) - Only authenticated users can create ratings, and `raterId` must match `auth.uid`.
     * @allow (update, delete) - Ratings can only be updated or deleted by the user who created the rating (`raterId`).
     * @deny (create) - If `raterId` does not match `auth.uid`.
     * @deny (update, delete) - If the user is not the rater.
     * @principle Allows public read access but restricts write access to the rater.
     */
    match /ratings/{ratingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRater(raterId) {
        return request.auth.uid == raterId;
      }

      function isExistingRater(ratingId) {
        return get(/databases/$(database)/documents/ratings/$(ratingId)).data.raterId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isSignedIn() && isExistingRater(ratingId);
      allow delete: if isSignedIn() && isExistingRater(ratingId);
    }

    /**
     * @description Controls access to chat messages within a ride.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (get, list) - Only users who are riders or the offerer of the ride can read messages.
     * @allow (create) - Only users who are riders or the offerer of the ride can create messages, and `senderId` must match `auth.uid`.
     * @deny (create) - If `senderId` does not match `auth.uid`.
     * @deny (get, list) - If the user is not a rider or the offerer of the ride.
     * @principle Restricts access to chat messages to ride participants.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOfferer(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }

      function isRider(rideId) {
        return request.auth.uid in get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds;
      }

      function isParticipant(rideId) {
        return isOfferer(rideId) || isRider(rideId);
      }

      allow get, list: if isSignedIn() && isParticipant(rideId);
      allow create: if isSignedIn() && isParticipant(rideId) && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false; // Messages cannot be updated or deleted once created.
    }
  }
}