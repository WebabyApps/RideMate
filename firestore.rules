/**
 * @file Firestore Security Rules for RideMate
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an offerer-ownership model for rides.
 * Ratings and chat messages are linked to rides, with access control based on ride participation.
 *
 * @Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /rides/{rideId}: Stores ride data, with the offerer having write access and riders potentially having read access.
 * - /ratings/{ratingId}: Stores rating data, with rules enforcing rater and rated user validation.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages for rides, accessible to ride participants.
 *
 * @Key Security Decisions:
 * - Users can only access their own profile data.
 * - Ride offerers have full control over their rides.
 * - Listing of users is disallowed.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * @Denormalization for Authorization:
 * - Ride documents include 'offererId' to easily identify the ride creator for authorization.
 * - Rating documents include both 'raterId' and 'ratedUserId' for authorization without external `get()` calls.
 *
 * @Structural Segregation:
 * - User profiles are stored in a dedicated /users/{userId} collection, enforcing private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User 'user123' with matching userId creates their profile.
     * @allow (get) User 'user123' reads their own profile.
     * @allow (update) User 'user123' updates their own profile.
     * @allow (delete) User 'user123' deletes their own profile.
     * @deny (create) User 'user456' attempts to create a profile for user 'user123'.
     * @deny (get) User 'user456' attempts to read user 'user123' profile.
     * @deny (update) User 'user456' attempts to update user 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages rides, allowing offerer full control. Riders need to be validated, but that requires additional data.
     * @path /rides/{rideId}
     * @allow (create) User 'user123' creates a new ride with offererId set to 'user123'.
     * @allow (get) Any signed-in user can read ride information.
     * @allow (update) User 'user123' (offerer) updates a ride they created.
     * @allow (delete) User 'user123' (offerer) deletes a ride they created.
     * @deny (create) User 'user456' attempts to create a ride with offererId set to 'user123'.
     * @deny (update) User 'user456' attempts to update a ride offered by 'user123'.
     * @principle Enforces offerer ownership for writes, allows public reads.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Manages ratings, enforcing rater and rated user validation.
     * @path /ratings/{ratingId}
     * @allow (create) User 'user123' creates a rating with raterId set to 'user123'.
     * @allow (get) Any signed-in user can read rating information.
     * @allow (update) User 'user123' (rater) updates their own rating.
     * @allow (delete) User 'user123' (rater) deletes their own rating.
     * @deny (create) User 'user456' attempts to create a rating with raterId set to 'user123'.
     * @deny (update) User 'user456' attempts to update a rating created by 'user123'.
     * @principle Enforces rater ownership for writes, allows public reads.
     */
    match /ratings/{ratingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.raterId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.raterId);
      allow delete: if isExistingOwner(resource.data.raterId);
    }

    /**
     * @description Manages chat messages within a specific ride, accessible to ride participants.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) User 'user123' creates a message in ride 'ride456' if they are a participant. Needs ride data to validate.
     * @allow (get) Any signed-in user can read a chat message. Participants need to be validated.
     * @allow (update) No one can update a chat message.
     * @allow (delete) No one can delete a chat message.
     * @deny (create) User 'user456' attempts to create a message in ride 'ride456' if they are not a participant.
     * @principle Restricts access to ride participants for chat messages.
     */
    match /rides/{rideId}/messages/{messageId} {
      allow get, list: if true; // TODO: Need ride data to validate participants.
      allow create: if isSignedIn(); // TODO: Need ride data to validate participants.
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}