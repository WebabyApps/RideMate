/**
 * @fileoverview Firestore Security Rules for RideMate application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict owner-only access model for user data
 * and public read access for ride data, with owner-only control over ride creation and modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /rides: Stores ride information. Read access is public, but create, update, and delete operations are restricted to the ride offerer.
 * - /rides/{rideId}/ratings: Stores ratings for specific rides.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Anyone can list rides, but only the ride offerer can create, update, or delete them.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Ride documents contain an `offererId` field, which is used to determine ownership for write operations.
 *   This avoids the need for costly `get()` calls to a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages ride data. Allows public read access but restricts write access to the ride offerer.
     * @path /rides/{rideId}
     * @allow (get, list) anyone can read rides.
     * @allow (create, update, delete) only the ride offerer can create, update, or delete.
     * @deny (create, update, delete) if not the ride offerer.
     * @principle Public read, owner-only writes.
     */
    match /rides/{rideId} {
      // Function to check if the requesting user is the offerer of the ride.
      function isRideOfferer(offererId) {
        return request.auth.uid == offererId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.offererId;
      allow update: if request.auth.uid == resource.data.offererId;
      allow delete: if request.auth.uid == resource.data.offererId;
    }

    /**
     * @description Manages ratings for a specific ride.
     * @path /rides/{rideId}/ratings/{ratingId}
     */
    match /rides/{rideId}/ratings/{ratingId} {
        function isSignedIn() {
          return request.auth != null;
        }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if request.auth.uid == resource.data.userId;
    }
  }
}