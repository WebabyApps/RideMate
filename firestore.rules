/**
 * @file Firestore Security Rules for RideMate
 *
 * @Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and rides,
 * and a shared-access model for chat messages within rides. Ratings are
 * accessible with owner-only writes.
 *
 * @Data Structure:
 * - /users/{userId}: Stores user profile data, owned by the user with matching userId.
 * - /rides/{rideId}: Stores ride data, owned by the user who created the ride (offererId).
 * - /ratings/{ratingId}: Stores ride ratings.
 * - /rides/{rideId}/messages/{messageId}: Stores chat messages associated with a ride; access is restricted to ride participants.
 *
 * @Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Rides can be created by any authenticated user, but only the owner can modify or delete them.
 * - Chat messages are restricted to users who are participants in the associated ride.
 * - Listing of User Profiles is disallowed.
 *
 * @Denormalization for Authorization:
 * - The `Ride` document includes the `offererId` to identify the ride creator for authorization.
 * - The `Rating` document includes both `raterId` and `ratedUserId` to authorize rating operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile if request.auth.uid == userId.
     * @allow (get, list) - Authenticated user reads their own profile if request.auth.uid == userId.
     * @allow (update, delete) - Authenticated user updates/deletes their own profile if request.auth.uid == userId and the document exists.
     * @deny (create) - Authenticated user attempts to create a profile with a userId that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing user profiles is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ride data.
     * @path /rides/{rideId}
     * @allow (create) - Authenticated user creates a ride with offererId matching their auth.uid.
     * @allow (get, list) - Any user can read ride data.
     * @allow (update, delete) - Only the ride offerer can update/delete the ride, and the document must exist.
     * @deny (create) - Authenticated user attempts to create a ride with an offererId that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes; allows public reads for ride information.
     */
    match /rides/{rideId} {
      function isOwner(offererId) {
        return request.auth != null && request.auth.uid == offererId;
      }
        function isExistingOwner(offererId) {
        return isOwner(offererId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.offererId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.offererId);
      allow delete: if isExistingOwner(resource.data.offererId);
    }

    /**
     * @description Controls access to rating data.
     * @path /ratings/{ratingId}
     * @allow (create) - Authenticated user creates a rating with raterId matching their auth.uid.
     * @allow (get, list) - Any user can read rating data.
     * @allow (update, delete) - Only the rating creator can update/delete the rating, and the document must exist.
     * @deny (create) - Authenticated user attempts to create a rating with a raterId that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes; allows public reads for rating information.
     */
    match /ratings/{ratingId} {
      function isOwner(raterId) {
        return request.auth != null && request.auth.uid == raterId;
      }
        function isExistingOwner(raterId) {
        return isOwner(raterId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.raterId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.raterId);
      allow delete: if isExistingOwner(resource.data.raterId);
    }

    /**
     * @description Controls access to chat messages within a ride.
     * @path /rides/{rideId}/messages/{messageId}
     * @allow (create) - Authenticated user who is a participant in the ride can create a message.
     * @allow (get, list) - Authenticated user who is a participant in the ride can read messages.
     * @allow (update, delete) - No one can update or delete a chat message (for simplicity).
     * @deny (create) - Authenticated user who is NOT a participant in the ride attempts to create a message.
     * @principle Restricts access to chat messages to participants of the associated ride.
     */
    match /rides/{rideId}/messages/{messageId} {
      function isParticipant(rideId) {
          return get(/databases/$(database)/documents/rides/$(rideId)).data.riderIds.hasAny([request.auth.uid]) || get(/databases/$(database)/documents/rides/$(rideId)).data.offererId == request.auth.uid;
      }

      allow get, list: if request.auth != null && isParticipant(rideId);
      allow create: if request.auth != null && isParticipant(rideId) && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}